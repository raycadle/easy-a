#!/usr/bin/env bash

source "$CONFIG_FILE"
source "$FUNCTIONS"

echo -e "-------------------------------------------------
                First Stage: Presetup
-------------------------------------------------

Starting..."
timedatectl set-ntp true
pacman -Sy --noconfirm --needed pacman-contrib reflector gptfdisk cryptsetup rsync
sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
reflector -a 48 -c "$ISO" -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist
sgdisk -Z "${DISK}" # Zap all on disk
sgdisk -a 2048 -o "${DISK}" # New GPT disk with 2048 alignment
if [[ "${SSD}" -eq 0 ]]; then # Disabled if using an SSD, as it can take long to finish due to the way SSDs work.
cryptsetup open --type plain -d /dev/urandom "${DISK}" to_wipe
dd if=/dev/zero of=/dev/mapper/to_wipe status=progress # Wiping container
cryptsetup close to_wipe # Closing container
fi
if [[ -d "/sys/firmware/efi" ]]; then # Checking for UEFI systems
    sgdisk -n 1::+1G --typecode=1:ef00 "${DISK}" # Partition 1 (UEFI Boot, 1GB)
else
    sgdisk -n 1::+1G --typecode=1:ef02 "${DISK}" # Partition 1 (BIOS Boot, 1GB)
    sgdisk -A 1:set:2 "${DISK}" # Setting Partition 1 legacy(BIOS) bootable
fi
sgdisk -n 2::-0 --typecode=2:8300 "${DISK}" # Partition 2 (Root, Remaining space)
if [[ "${DISK}" =~ "nvme" ]]; then # Checking for nvme drives
    declare -r PART1=${DISK}p1
    declare -rx PART2=${DISK}p2
else
    declare -r PART1=${DISK}1
    declare -rx PART2=${DISK}2
fi
if [[ -d "/sys/firmware/efi" ]]; then mkfs.vfat -F32 "$PART1"; else mkfs.ext4 "$PART1"; fi
if [[ "$PS" == "basic" ]]; then
    mkfs.ext4 "$PART2"
    mount -t ext4 "$PART2" /mnt -o relatime,errors=remount-ro
    mount_boot
elif [[ "$PS" == "encrypted" ]]; then
    create_luks_container
    mkfs.ext4 /dev/mapper/cryptroot; mount -t ext4 /dev/mapper/cryptroot /mnt -o relatime,errors=remount-ro
    mount_boot
elif [[ "$PS" == "encryptedlvm" ]]; then
    create_luks_container
    pvcreate /dev/mapper/cryptroot; vgcreate cryptlv /dev/mapper/cryptrootp
    mkdir -p /mnt/{etc,home,rec,tmp,usr,var}
    lvcreate -L 100G cryptlv -n root; mkfs.ext4 /dev/cryptlv/root; mount -t ext4 /dev/cryptlv/root /mnt -o relatime,errors=remount-ro
    mount_boot
    lvcreate -L 50G cryptlv -n etc; mkfs.ext4 /dev/cryptlv/etc; mount -t ext4 /dev/cryptlv/etc /mnt/etc -o nodev,nosuid,noexec,ro
    lvcreate -L 100G cryptlv -n rec; mkfs.ext4 /dev/cryptlv/rec; mount -t ext4 /dev/cryptlv/rec /mnt/rec -o noauto,nodev,nosuid
    lvcreate -L 50G cryptlv -n tmp; mkfs.ext4 /dev/cryptlv/tmp; mount -t ext4 /dev/cryptlv/tmp /mnt/tmp -o nodev,nosuid,noexec
    lvcreate -L 100G cryptlv -n usr; mkfs.ext4 /dev/cryptlv/usr; mount -t ext4 /dev/cryptlv/usr /mnt/usr -o relatime,nodev,ro
    lvcreate -L 100G cryptlv -n var; mkfs.ext4 /dev/cryptlv/var; mount -t ext4 /dev/cryptlv/var /mnt/var -o relatime,nodev,nosuid,noexec
    lvcreate -L 100%FREE cryptlv -n home; mkfs.ext4 /dev/cryptlv/home; mount -t ext4 /dev/cryptlv/home /mnt/home -o relatime,nodev,nosuid
fi
basestrap /mnt base linux linux-firmware --noconfirm --needed
fstabgen -U /mnt >> /mnt/etc/fstab
echo "keyserver hkp://keyserver.ubuntu.com" >> /mnt/etc/pacman.d/gnupg/gpg.conf
cp -R "$SCRIPT_DIR" /mnt/root/Easy-A
cp /mnt/etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist.backup
cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
stage_complete
artix-chroot /mnt /root/Easy-A/stages/2-setup.sh
