#!/usr/bin/env bash

source "$CONFIG_FILE"
source "$FUNCTIONS"
source "$PACKAGES"

echo -e "-------------------------------------------------
                Second Stage: Setup
-------------------------------------------------

Starting..."
timedatectl set-ntp true
pacman -Sy --noconfirm --needed pacman-contrib
sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
pacman -Sy --noconfirm
pacman -S --noconfirm --needed "${syspkgs[*]}"
case "$CPU" in
	GenuineIntel) pacman -S --noconfirm intel-ucode; proc_ucode=intel-ucode.img;;
	AuthenticAMD) pacman -S --noconfirm amd-ucode; proc_ucode=amd-ucode.img;;
esac
if grep -E "NVIDIA|GeForce" <<< "$GPU"; then pacman -S --noconfirm --needed nvidia; nvidia-xconfig
elif grep -E "Radeon|AMD" <<< "$GPU"; then pacman -S --noconfirm --needed xf86-video-amdgpu
elif grep -E "Integrated Graphics Controller|Intel Corporation UHD" <<< "$GPU"; then pacman -S --noconfirm --needed libva-intel-driver libvdpau-va-gl lib32-vulkan-intel vulkan-intel libva-intel-driver libva-utils lib32-mesa
fi
pacman -S --noconfirm --needed "${userpkgs[*]}"
UUID=$(blkid -s UUID -o value "$PART2") && declare -r UUID
if [[ "$PS" == "basic" ]]; then
    sed -i 's/HOOKS=/HOOKS=(base udev keyboard autodetect keymap consolefont modconf block filesystems fsck)' /etc/mkinitcpio.conf
elif [[ "$PS" == "encrypted" ]]; then
    sed -i 's/HOOKS=/HOOKS=(base udev keyboard autodetect keymap consolefont modconf block encrypt filesystems fsck)' /etc/mkinitcpio.conf
    echo "cryptdevice=UUID=$UUID:cryptroot root=/dev/mapper/cryptroot:allow-discards,no_read_workqueue,no_write_workqueue" >> /etc/default/grub
elif [[ "$PS" == "encryptedlvm" ]]; then
    sed -i 's/HOOKS=/HOOKS=(base udev keyboard autodetect keymap consolefont modconf block encrypt lvm2 filesystems fsck)' /etc/mkinitcpio.conf
    echo "cryptdevice=UUID=$UUID:/dev/mapper/cryptroot root=/dev/cryptlv/root:allow-discards,no_read_workqueue,no_write_workqueue" >> /etc/default/grub
fi
mkinitcpio -p linux
if [[ -d "/sys/firmware/efi" ]]; then grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub; else grub-install --recheck "$DISK"; fi
grub-mkconfig -o /boot/grub/grub.cfg
rc-update add connman boot && rc-service start connman
sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$CORES\"/g" /etc/makepkg.conf
sed -i "s/COMPRESSXZ=(xz -c -z -)/COMPRESSXZ=(xz -c -T $CORES -z -)/g" /etc/makepkg.conf
sed -i 's/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && locale-gen
timedatectl --no-ask-password set-timezone "$TIMEZONE" && timedatectl --no-ask-password set-ntp 1
localectl --no-ask-password set-locale LANG="en_US.UTF-8" LC_TIME="en_US.UTF-8" && localectl --no-ask-password set-keymap "$KEYMAP"
echo -e "Please enter a strong password for root." && passwd
useradd -m -G wheel -s /bin/bash "$USERNAME"
echo -e "Please enter a strong password for $USERNAME." && passwd "$USERNAME"
echo "$MACHINE" > /etc/hostname
cp -R ~/Easy-A/dotfiles /home/"$USERNAME"/.dotfiles
mkdir /home/"$USERNAME"/.ssh
chown "$USERNAME":"$USERNAME" /home/"$USERNAME"/.ssh && chmod 700 /home/"$USERNAME"/.ssh
stage_complete
bash /root/Easy-A/stages/3-postsetup.sh
